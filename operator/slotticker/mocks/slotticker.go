// Code generated by MockGen. DO NOT EDIT.
// Source: ./slotticker.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	phase0 "github.com/attestantio/go-eth2-client/spec/phase0"
	gomock "github.com/golang/mock/gomock"
)

// MockSlotTicker is a mock of SlotTicker interface.
type MockSlotTicker struct {
	ctrl     *gomock.Controller
	recorder *MockSlotTickerMockRecorder
}

// MockSlotTickerMockRecorder is the mock recorder for MockSlotTicker.
type MockSlotTickerMockRecorder struct {
	mock *MockSlotTicker
}

// NewMockSlotTicker creates a new mock instance.
func NewMockSlotTicker(ctrl *gomock.Controller) *MockSlotTicker {
	mock := &MockSlotTicker{ctrl: ctrl}
	mock.recorder = &MockSlotTickerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSlotTicker) EXPECT() *MockSlotTickerMockRecorder {
	return m.recorder
}

// Next mocks base method.
func (m *MockSlotTicker) Next() <-chan time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(<-chan time.Time)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockSlotTickerMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockSlotTicker)(nil).Next))
}

// Slot mocks base method.
func (m *MockSlotTicker) Slot() phase0.Slot {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Slot")
	ret0, _ := ret[0].(phase0.Slot)
	return ret0
}

// Slot indicates an expected call of Slot.
func (mr *MockSlotTickerMockRecorder) Slot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Slot", reflect.TypeOf((*MockSlotTicker)(nil).Slot))
}

// MockConfigProvider is a mock of ConfigProvider interface.
type MockConfigProvider struct {
	ctrl     *gomock.Controller
	recorder *MockConfigProviderMockRecorder
}

// MockConfigProviderMockRecorder is the mock recorder for MockConfigProvider.
type MockConfigProviderMockRecorder struct {
	mock *MockConfigProvider
}

// NewMockConfigProvider creates a new mock instance.
func NewMockConfigProvider(ctrl *gomock.Controller) *MockConfigProvider {
	mock := &MockConfigProvider{ctrl: ctrl}
	mock.recorder = &MockConfigProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigProvider) EXPECT() *MockConfigProviderMockRecorder {
	return m.recorder
}

// GetGenesisTime mocks base method.
func (m *MockConfigProvider) GetGenesisTime() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGenesisTime")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetGenesisTime indicates an expected call of GetGenesisTime.
func (mr *MockConfigProviderMockRecorder) GetGenesisTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGenesisTime", reflect.TypeOf((*MockConfigProvider)(nil).GetGenesisTime))
}

// SlotDurationSec mocks base method.
func (m *MockConfigProvider) SlotDurationSec() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SlotDurationSec")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// SlotDurationSec indicates an expected call of SlotDurationSec.
func (mr *MockConfigProviderMockRecorder) SlotDurationSec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SlotDurationSec", reflect.TypeOf((*MockConfigProvider)(nil).SlotDurationSec))
}
